import streamlit as st
import torch
import torch.nn.functional as F
from torchvision import transforms
from torchvision.models import mobilenet_v2
from PIL import Image
import numpy as np
import cv2

# üß† Load m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = mobilenet_v2(weights=None)
    model.classifier[1] = torch.nn.Linear(model.last_channel, 10)
    state_dict = torch.load("best_mobilenetv2.pth", map_location="cpu")
    model.load_state_dict(state_dict)
    model.eval()
    return model

model = load_model()

# üè∑Ô∏è Danh s√°ch l·ªõp b·ªánh
class_names = [
    "Bacterial Leaf Blight", "Brown Spot", "Healthy Rice Leaf", "Leaf Blast",
    "Leaf Scald", "Narrow Brown Leaf Spot", "Neck Blast", "Rice Hispa",
    "Sheath Blight", "Tungro Disease"
]

# üìö Th√¥ng tin b·ªánh
rice_disease_info = {
    "Bacterial Leaf Blight": {
        "vi": "B·ªánh b·∫°c l√°: L√° b·ªã v√†ng, c√≥ v·ªát n∆∞·ªõc, vi khu·∫©n g√¢y h·∫°i.",
        "solution": "D√πng thu·ªëc g·ªëc ƒë·ªìng, ki·ªÉm tra ngu·ªìn n∆∞·ªõc."
    },
    "Brown Spot": {
        "vi": "B·ªánh ƒë·ªëm n√¢u: Xu·∫•t hi·ªán ƒë·ªëm tr√≤n n√¢u tr√™n l√°.",
        "solution": "Phun thu·ªëc tr·ª´ n·∫•m, tƒÉng c∆∞·ªùng ph√¢n kali."
    },
    "Healthy Rice Leaf": {
        "vi": "L√° kh·ªèe m·∫°nh: Kh√¥ng c√≥ d·∫•u hi·ªáu b·ªánh.",
        "solution": "Duy tr√¨ ch·∫ø ƒë·ªô chƒÉm s√≥c hi·ªán t·∫°i."
    },
    "Leaf Blast": {
        "vi": "B·ªánh ƒë·∫°o √¥n l√°: V·∫øt ch√°y h√¨nh thoi, lan nhanh.",
        "solution": "Phun thu·ªëc tr·ª´ n·∫•m, ki·ªÉm tra ƒë·ªô ·∫©m ru·ªông."
    },
    "Leaf Scald": {
        "vi": "B·ªánh ch√°y b√¨a l√°: M√©p l√° b·ªã ch√°y, kh√¥.",
        "solution": "Gi·∫£m ph√¢n ƒë·∫°m, tƒÉng kali, ki·ªÉm tra n∆∞·ªõc."
    },
    "Narrow Brown Leaf Spot": {
        "vi": "B·ªánh ƒë·ªëm n√¢u h·∫πp: V·∫øt ƒë·ªëm d√†i, h·∫πp m√†u n√¢u.",
        "solution": "Phun thu·ªëc tr·ª´ n·∫•m, c·∫£i thi·ªán ƒë·∫•t."
    },
    "Neck Blast": {
        "vi": "B·ªánh ƒë·∫°o √¥n c·ªï b√¥ng: C·ªï b√¥ng b·ªã th·ªëi, kh√¥ng tr·ªï h·∫°t.",
        "solution": "Phun thu·ªëc tr·ª´ n·∫•m tr∆∞·ªõc tr·ªï, ki·ªÉm tra gi·ªëng l√∫a."
    },
    "Rice Hispa": {
        "vi": "S√¢u cu·ªën l√° l√∫a: L√° b·ªã cu·ªën, c√≥ s√¢u b√™n trong.",
        "solution": "Phun thu·ªëc tr·ª´ s√¢u, b·∫Øt s√¢u th·ªß c√¥ng."
    },
    "Sheath Blight": {
        "vi": "B·ªánh kh√¥ v·∫±n: V·∫øt b·ªánh ·ªü b·∫π l√°, lan l√™n l√°.",
        "solution": "Phun thu·ªëc tr·ª´ n·∫•m, gi·∫£m m·∫≠t ƒë·ªô c·∫•y."
    },
    "Tungro Disease": {
        "vi": "B·ªánh v√†ng l√πn-l√πn xo·∫Øn l√°: L√° xo·∫Øn, c√¢y l√πn, virus g√¢y h·∫°i.",
        "solution": "Di·ªát r·∫ßy truy·ªÅn b·ªánh, d√πng gi·ªëng kh√°ng b·ªánh."
    }
}

# üîç D·ª± ƒëo√°n v√† Grad-CAM
def run_gradcam(image: Image.Image):
    try:
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor()
        ])
        input_tensor = transform(image).unsqueeze(0)

        feature_maps = []
        gradients = []

        def forward_hook(module, input, output):
            feature_maps.append(output)

        def backward_hook(module, grad_in, grad_out):
            gradients.append(grad_out[0])

        target_layer = model.features[-1]
        target_layer.register_forward_hook(forward_hook)
        target_layer.register_backward_hook(backward_hook)

        output = model(input_tensor)
        pred_class = output.argmax(dim=1).item()
        confidence = torch.softmax(output, dim=1)[0, pred_class].item()
        pred_label = class_names[pred_class]

        model.zero_grad()
        output[0, pred_class].backward()

        grads = gradients[0].mean(dim=[2, 3], keepdim=True)
        fmap = feature_maps[0]
        cam = (grads * fmap).sum(dim=1).squeeze()
        cam = F.relu(cam)
        cam = cam - cam.min()
        if cam.max() != 0 and not torch.isnan(cam.max()):
            cam = cam / cam.max()
        else:
            cam = torch.zeros_like(cam)
        cam = cam.cpu().numpy()

        cam = cv2.resize(cam, image.size)
        heatmap = cv2.applyColorMap(np.uint8(255 * cam), cv2.COLORMAP_JET)
        img_np = np.array(image)
        overlay = cv2.addWeighted(img_np, 0.5, heatmap, 0.5, 0)

        return overlay, pred_label, confidence
    except Exception:
        return np.array(image), "Kh√¥ng x√°c ƒë·ªãnh", 0.0

# üé® Giao di·ªán Streamlit
st.set_page_config(page_title="üåæ Nh·∫≠n di·ªán b·ªánh l√∫a", layout="wide")
st.title("üåæ Nh·∫≠n di·ªán b·ªánh l√∫a b·∫±ng MobileNetV2 + Grad-CAM")

uploaded_file = st.file_uploader("üì§ K√©o th·∫£ ·∫£nh l√° l√∫a t·∫°i ƒë√¢y", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="üì∑ ·∫¢nh g·ªëc", use_column_width=True)

    overlay, label, confidence = run_gradcam(image)
    st.image(overlay, caption=f"üî• Grad-CAM: {label}", use_column_width=True)

    st.markdown(f"### üîç D·ª± ƒëo√°n: `{label}` ({confidence*100:.1f}%)")

    if confidence < 0.5:
        st.warning("‚ö†Ô∏è D·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y th·∫•p. Vui l√≤ng ki·ªÉm tra l·∫°i ·∫£nh ho·∫∑c m√¥ h√¨nh.")

    info = rice_disease_info.get(label, {
        "vi": "Kh√¥ng c√≥ th√¥ng tin b·ªánh.",
        "solution": "Vui l√≤ng ki·ªÉm tra l·∫°i ·∫£nh ho·∫∑c m√¥ h√¨nh."
    })

    st.markdown(f"**üìñ M√¥ t·∫£:** {info['vi']}")
    st.markdown(f"**üõ°Ô∏è C√°ch ph√≤ng ch·ªëng:** {info['solution']}")
